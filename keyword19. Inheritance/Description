 1. 상속 1단계 - 문제 제시
    EmployeeManager1.cpp 참조
    초기에 PermanentWorker만 존재하던 시기의 Code에서 다양한 형태의 Worker로의 확장 시 모든 부분을 뒤바꾸어야 하는 경우가 생김

    기존 Code의 확장성 및 재활용 측면에서 필요하다

 2. 상속 2단계 - 문법
    1) UnivStudent 클래스가 Person 클래스를 상속하게 되면, UnivStudent 클래스는 Person 클래스가 지닌 모든 멤버를 물려받을 뿐 아니라,
    본인 고유의 특성도 가지게 된다.

    2) Derived 객체의 멤버함수를 통해 Base 객체의 private 멤버변수에 접근은 불가능하다.
    정보은닉은 하나의 객체 내에서도 진행됨!

    3) Derived 객체의 생성자 호출 시 Base 객체의 생성자가 먼저 호출 된다.
    이 때 Base 객체 생성자 type을 지정 해 주지 않으면 void type으로 자동 호출된다.

    4) Derived 객체의 소멸자 호출 시 Derived 소멸자 호출 후 Base 소멸자 호출된다.
    +) 생성자에서 동적 할당한 메모리 공간은 소멸자에서 해제한다.

 3. Protected 멤버
    Private < Protected < Public 순으로 접근 권한의 범위가 넓어진다.
    protected는 상속 개념에서, 상속받은 하위 Class가 접근할 수 있도록 하는 keyword이다.
    다만 자주 사용하지 않는 것이 좋으며, 상속 관계에서도 정보은닉은 지키는 것이 좋다.

 4. 상속에서의 private, protect, public
    1) protected 상속 - protected보다 접근 범위가 넓은 멤버는 protected로 변경시켜서 상속하겠다.
    2) private 상속 - private보다 접근 범위가 넓은 멤버는 private로 변경시켜서 상속하겠다. 
    3) public 상속 - 그대로 상속하겠다.
    -> 대체로 public 상속을 사용한다.

 5. 상속은 IS A 관계에 대하여 주로 사용되며, HAS A 관계애 대해서는 사용하기는 하나 상속 없이도 더 나은 구현이 가능하다.

 6. 객체 포인터
    C++에서 AAA형 포인터 변수는 AAA 객체 또는 AAA를 직접 혹은 간접적으로 상속하는 모든 객체를 가리킬 수 있다.

 7. 오버라이딩
    동일 type의 함수를 sub class에서 정의하면 main class의 함수가 overriding된다.
    매개변수 type이나 자료형이 다른 경우는 오버로딩이 된다.