 1. 객체 포인터
    Base 객체 포인터가 Derived 객체를 가리키고 있을 경우, 포인터의 자료형을 기준으로 멤버 접근 가능 여부를 따진다.
    Derived 객체를 가리키는 Base 포인터에서 Derived 멤버함수를 호출할 수 없다.

 2. 가상함수 Virtual Function
    virtual 키워드 선언을 통해서 이루어진다.
    가상함수가 선언 되면, 이 함수를 오버라이딩 하는 함수도 가상함수가 된다.
    가상함수로 선언 되면, 해당 함수 호출 시 포인터의 자료형을 기반으로 호출대상을 결정하지 않고 
    포인터 변수가 실제로 가리키는 객체를 참조하여 호출의 대상을 결정한다.

 3. 순수 가상함수와 추상클래스
    클래스 중에서 객체생성을 목적으로 정의되지 않는 클래스도 존재한다. (== Abstract Class)
    (상속 목적으로만 정의된 base class)
    따라서 이러한 Class의 가상함수를 '순수 가상함수'로 선언하여 객체의 생성을 문법적으로 막는 것이 좋다.
    '순수 가상함수'란 함수의 몸체가 정의되지 않은 함수를 의미한다.

 4. Polymorphism
    다형성이란 문장은 같으나 결과가 다른 것을 의미한다.
    동일한 pointer 변수와 동일한 함수 name이어도 다른 결과가 나타날 수 있음을 의미한다.
    (overloading, overriding, virtual function 등을 통해)

 5. 가상 소멸자
    가상함수와 마찬가지로 소멸자에도 virtual keyword가 필요하다.
    virtual keyword가 없으면 base 객체의 소멸자만 호출되게 되어, sub 객체에서 동적할당한 자원이 해제되지 못하는 상황이 발생한다.
    최상단에 virtual keyword를 붙여 소멸자를 선언하면 자동으로 하위 소멸자들에게도 virtual 키워드가 부여된다.
    계층구조상 최하단 소멸자부터 최상단 소멸자까지 순차로 호출된다.
    ex) VirtualDestructor.cpp
    